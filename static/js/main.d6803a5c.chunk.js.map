{"version":3,"sources":["video/lisbonvideo.mp4","sections/banner.jsx","sections/portfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","className","autoPlay","loop","muted","src","LisbonVideo","type","Navbar","bg","variant","Brand","href","Nav","Link","Button","hreaf","Component","Portfolio","Carousel","Item","alt","Caption","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,yC,iMC2C5BC,E,uKAtCb,OACC,yBAAKC,UAAU,oBACd,2BAAOC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACH,UAAU,mBACpC,4BAAQI,IAAKC,IAAaC,KAAK,eAEhC,yBAAKN,UAAU,2BACd,yBAAKA,UAAU,mBAEhB,4BAAQA,UAAU,oBACjB,kBAACO,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,eACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,UACA,kBAACC,EAAA,EAAD,CAAKZ,UAAU,WACd,kBAACY,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,YACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,YAAf,cAIH,yBAAKX,UAAU,kBACd,yBAAKA,UAAU,+BACd,kBAACc,EAAA,EAAD,CAAQL,QAAQ,aAAaE,KAAK,IAAlC,gBAGA,kBAACG,EAAA,EAAD,CAAQL,QAAQ,aAAaE,KAAK,IAChC,IADF,iBAEgB,KAEhB,kBAACG,EAAA,EAAD,CAAQL,QAAQ,aAAaM,MAAM,IACjC,IADF,cAEa,Y,GA/BEC,a,QCiCNC,E,uKAhCb,OACC,yBAAKjB,UAAU,uBACd,kBAACkB,EAAA,EAAD,KACC,kBAACA,EAAA,EAASC,KAAV,KACC,yBAAKnB,UAAU,gBAAgBI,IAAI,+CAA+CgB,IAAI,gBACtF,kBAACF,EAAA,EAASG,QAAV,KACC,iDACA,2FAGF,kBAACH,EAAA,EAASC,KAAV,KACC,yBAAKnB,UAAU,gBAAgBI,IAAI,gDAAgDgB,IAAI,gBAEvF,kBAACF,EAAA,EAASG,QAAV,KACC,kDACA,yFAGF,kBAACH,EAAA,EAASC,KAAV,KACC,yBAAKnB,UAAU,gBAAgBI,IAAI,+CAA+CgB,IAAI,gBAEtF,kBAACF,EAAA,EAASG,QAAV,KACC,iDACA,uG,GAzBiBL,aCgBTM,MAbf,WACC,OACC,yBAAKtB,UAAU,OACd,kBAAC,EAAD,KACC,kBAACc,EAAA,EAAD,CAAQL,QAAQ,gBAAhB,oBAED,yBAAKT,UAAU,oBACd,kBAAC,EAAD,SCAgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6803a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lisbonvideo.524ab071.mp4\";","import React, { Component } from 'react';\nimport { Button, Navbar, Nav } from 'react-bootstrap';\nimport LisbonVideo from '../video/lisbonvideo.mp4';\nclass Banner extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"banner-container\">\n\t\t\t\t<video autoPlay loop muted className=\"video-container\">\n\t\t\t\t\t<source src={LisbonVideo} type=\"video/mp4\" />\n\t\t\t\t</video>\n\t\t\t\t<div className=\"video-overlay-container\">\n\t\t\t\t\t<div className=\"video-overlay\" />\n\t\t\t\t</div>\n\t\t\t\t<header className=\"navbar-container\">\n\t\t\t\t\t<Navbar bg=\"dark\" variant=\"transparent\">\n\t\t\t\t\t\t<Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t\t<Nav.Link href=\"#home\">Home</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link href=\"#features\">Features</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"banner-content\">\n\t\t\t\t\t<div className=\"centering-buttons-container\">\n\t\t\t\t\t\t<Button variant=\"cta-banner\" href=\"\">\n\t\t\t\t\t\t\tAvaliar Casa\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button variant=\"cta-banner\" href=\"\">\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\tEncontrar Casa{' '}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button variant=\"cta-banner\" hreaf=\"\">\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\tVender Casa{' '}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Banner;\n","import React, { Component } from 'react';\nimport { Carousel } from 'react-bootstrap';\nclass Portfolio extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"portfolio-container\">\n\t\t\t\t<Carousel>\n\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t<img className=\"d-block w-100\" src=\"holder.js/800x400?text=First slide&bg=373940\" alt=\"First slide\" />\n\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t<h3>First slide label</h3>\n\t\t\t\t\t\t\t<p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t<img className=\"d-block w-100\" src=\"holder.js/800x400?text=Second slide&bg=282c34\" alt=\"Third slide\" />\n\n\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t<h3>Second slide label</h3>\n\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t<img className=\"d-block w-100\" src=\"holder.js/800x400?text=Third slide&bg=20232a\" alt=\"Third slide\" />\n\n\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t<h3>Third slide label</h3>\n\t\t\t\t\t\t\t<p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t</Carousel.Item>\n\t\t\t\t</Carousel>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Portfolio;\n","import React from 'react';\nimport './style/index.scss';\nimport Banner from './sections/banner';\nimport { Button } from 'react-bootstrap';\nimport Portfolio from './sections/portfolio';\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Banner>\n\t\t\t\t<Button variant=\"testing-this\"> This a button </Button>\n\t\t\t</Banner>\n\t\t\t<div className=\"padded-container\">\n\t\t\t\t<Portfolio />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}